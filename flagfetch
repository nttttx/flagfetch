#!/usr/bin/env python3
"""Flagfetch source code"""

from pathlib import Path
import platform
import os.path

CEND = "\33[0m"
CBOLD = "\33[1m"
CITALIC = "\33[3m"
CURL = "\33[4m"
CBLINK = "\33[5m"
CBLINK2 = "\33[6m"
CSELECTED = "\33[7m"
CBLACK = "\33[30m"
CRED = "\33[31m"
CGREEN = "\33[32m"
CYELLOW = "\33[33m"
CBLUE = "\33[34m"
CVIOLET = "\33[35m"
CBEIGE = "\33[36m"
CWHITE = "\33[37m"
CBLACKBG = "\33[40m"
CREDBG = "\33[41m"
CGREENBG = "\33[42m"
CYELLOWBG = "\33[43m"
CBLUEBG = "\33[44m"
CVIOLETBG = "\33[45m"
CBEIGEBG = "\33[46m"
CWHITEBG = "\33[47m"
CGREY = "\33[90m"
CRED2 = "\33[91m"
CGREEN2 = "\33[92m"
CYELLOW2 = "\33[93m"
CBLUE2 = "\33[94m"
CVIOLET2 = "\33[95m"
CBEIGE2 = "\33[96m"
CWHITE2 = "\33[97m"
CGREYBG = "\33[100m"
CREDBG2 = "\33[101m"
CGREENBG2 = "\33[102m"
CYELLOWBG2 = "\33[103m"
CBLUEBG2 = "\33[104m"
CVIOLETBG2 = "\33[105m"
CBEIGEBG2 = "\33[106m"
CWHITEBG2 = "\33[107m"


def print_system_flags() -> None:
    """System section"""
    print(" " + CBOLD + platform.system() + CEND)

    if platform.system() == "Linux":
        try:
            os_release = platform.freedesktop_os_release()    
            print("\t" + CBOLD + "\33[" + os_release["ANSI_COLOR"] +
                  "m" + os_release["PRETTY_NAME"] + CEND)
        except OSError:
            pass
        except KeyError:
            print("\t" + CBLINK2 + CBOLD +"???" + CEND)

        # Shows if /bin, /sbin, /lib and /lib64 are linked to /usr
        # www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge
        if os.path.islink("/bin"):
            print("\t" + "Merged usr")
        else:
            print("\t" + "Split usr")

        # Init systems
        if os.path.isfile("/bin/systemctl"):                # SystemD
            print("\t" + CBOLD + CGREEN + "SystemD" + CEND)
        elif os.path.isfile("/bin/rc-status"):              # OpenRC
            print("\t" + CBOLD + CVIOLET + "OpenRC" + CEND)
        elif os.path.isfile("/bin/dinitctl"):               # Dinit
            print("\t" + CBOLD + "Dinit" + CEND)
        elif os.path.isfile("/bin/s6-svstat"):              # S6
            print("\t" + "S6")
        elif os.path.isfile("/etc/inittab"):                # SysVinit
            print("\t" + "SysVinit")

        # libC
        print("\t" + platform.libc_ver()[0])

        # EFI/BIOS
        if os.path.isdir(Path("/sys/firmware/efi")):
            print("\t" + CBLUE + "EFI" + CEND)
        else:
            print("\t" + CRED + "BIOS" + CEND)
    elif platform.system() == "Darwin":
        print("\t" + CBOLD + "macOS " + CEND + platform.mac_ver()[0])
    elif platform.system() == "Windows":
        print("\t" + platform.win32_ver()[0])


def print_hardware_flags() -> None:
    """Hardware section"""
    print(" " + CBOLD + platform.uname().node + CEND)

    # Uhhh... Sometimes platform.processor may return empty string.
    #if platform.processor():
    #    print("\t" + platform.processor())

    # CPU architecture
    print("\t" + platform.uname().machine)


def main() -> None:
    """Entry point"""
    print_system_flags()
    print_hardware_flags()


if __name__ == "__main__":
    main()
