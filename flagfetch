#!/usr/bin/env python3
"""Flagfetch source code"""

from multiprocessing import cpu_count
from pathlib import Path
import platform
import os.path

CEND = "\33[0m"
CBOLD = "\33[1m"
CITALIC = "\33[3m"
CURL = "\33[4m"
CBLINK = "\33[5m"
CBLINK2 = "\33[6m"
CSELECTED = "\33[7m"
CBLACK = "\33[30m"
CRED = "\33[31m"
CGREEN = "\33[32m"
CYELLOW = "\33[33m"
CBLUE = "\33[34m"
CVIOLET = "\33[35m"
CBEIGE = "\33[36m"
CWHITE = "\33[37m"
CBLACKBG = "\33[40m"
CREDBG = "\33[41m"
CGREENBG = "\33[42m"
CYELLOWBG = "\33[43m"
CBLUEBG = "\33[44m"
CVIOLETBG = "\33[45m"
CBEIGEBG = "\33[46m"
CWHITEBG = "\33[47m"
CGREY = "\33[90m"
CRED2 = "\33[91m"
CGREEN2 = "\33[92m"
CYELLOW2 = "\33[93m"
CBLUE2 = "\33[94m"
CVIOLET2 = "\33[95m"
CBEIGE2 = "\33[96m"
CWHITE2 = "\33[97m"
CGREYBG = "\33[100m"
CREDBG2 = "\33[101m"
CGREENBG2 = "\33[102m"
CYELLOWBG2 = "\33[103m"
CBLUEBG2 = "\33[104m"
CVIOLETBG2 = "\33[105m"
CBEIGEBG2 = "\33[106m"
CWHITEBG2 = "\33[107m"

SPACER = "\t"


def _detect_init_system() -> str:
    detectable_files = {
        # path to file -> init system
        "/bin/systemctl": "SystemD",
        "/bin/rc-status": "OpenRC",
        "/bin/dinitctl": "Dinit",
        "/bin/s6-svstat": "s6",
        # FIXME: "idk": "Runit",
        # FIXME: "idk": "Upstart",
        
        # ! SysVinit **MUST** be in the end
        # * Some init systems (ex. OpenRC) can be based on SysVinit
        "/etc/inittab": "SysVinit"
    }
    for file, init_system in detectable_files.items():
        if os.path.isfile(file):
            return init_system
    return "Unknown init(8)"


def print_system_flags() -> None:
    """System section"""
    print(f" {CBOLD}{platform.system()}{CEND}")
    match platform.system():
        case "Linux":
            try:
                os_release = platform.freedesktop_os_release()
                print(
                    f"{SPACER}{CBOLD}\33[{os_release['ANSI_COLOR']}m{os_release['PRETTY_NAME']}{CEND}")
            except OSError:
                # Failed to get os-release file
                pass
            except KeyError:
                # os-release file was found, but we cant show distro
                # * NEEDED: ANSI_COLOR, PRETTY_NAME
                print(f"{SPACER}{CBLINK}{CBOLD}{CGREY}???{CEND}")
            # Shows if /bin, /sbin, /lib and /lib64 are linked to /usr
            # www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge
            print(
                f"{SPACER}{'Merged usr' if os.path.islink(Path('/bin')) else 'Split usr'}{CEND}")
            print(f"{SPACER}{CBOLD}{_detect_init_system()}{CEND}")  # Init(8)
            print(f"{SPACER}{platform.libc_ver()[0]}")  # libC
            # EFI/BIOS
            print(
                f"{SPACER}{CBOLD}{'EFI' if os.path.isdir(Path('/sys/firmware/efi')) else 'BIOS'}{CEND}")
        case "Darwin":
            # TODO: show info for macOS
            print(f"{SPACER}{CBOLD}macOS{CEND} {platform.mac_ver()[0]}")
        case "Windows":
            # TODO: show info for Windows
            print(f"{SPACER}{platform.win32_ver()[0]}")


def print_hardware_flags() -> None:
    """Hardware section"""
    print(f" {CBOLD}{platform.node() if platform.node() else CGREY + 'Machine'}{CEND}")
    # CPU architecture
    print(f"{SPACER}{platform.machine()}")
    # CPU cores
    print(f"{SPACER}{cpu_count()} core{'s' if cpu_count() > 1 else ''}")


def main() -> None:
    """Entry point"""
    print_hardware_flags()
    print_system_flags()


if __name__ == "__main__":
    main()
